name: Build

on:
  workflow_dispatch:
  pull_request:
  push:
    branches:
      - master

jobs:
  build-deb:
    runs-on: ubuntu-latest
    container: goreleaser/nfpm
    outputs:
        deb_md5: ${{ steps.build.outputs.deb_md5 }}
        deb_sha1: ${{ steps.build.outputs.deb_sha1 }}
        deb_sha256: ${{ steps.build.outputs.deb_sha256 }}
    steps:
      - name: Checkout source
        uses: actions/checkout@4.2.2

      - name: Build
        id: build
        run: |
          mkdir out
          nfpm pkg --packager deb --target ./out
          echo "deb_md5=`md5sum ./out/*.deb | awk -F' ' '{printf($1)}'`" >> $GITHUB_OUTPUT
          echo "deb_sha1=`sha1sum ./out/*.deb | awk -F' ' '{printf($1)}'`" >> $GITHUB_OUTPUT
          echo "deb_sha256=`sha256sum ./out/*.deb | awk -F' ' '{printf($1)}'`" >> $GITHUB_OUTPUT
          
      - name: Cache Build Artifacts
        uses: actions/cache@v4
        with:
          path: ${{ github.workspace }}/out
          key: ${{ vars.deb_md5 }}-${{ vars.deb_sha1 }}-${{ vars.deb_sha256 }}

  build-repo-and-publish:
    needs: build-deb
    permissions:
      contents: write
    runs-on: ubuntu-latest
    steps:
      - name: Checkout gh-pages
        uses: actions/checkout@v4
        with:
          path: 'gh-pages'
          ref: 'gh-pages'

      - name: Fetch deb from build
        uses: actions/cache/save@v4
        with:
          path: ${{ github.workspace }}/build
          key: ${{ needs.build-deb.outputs.deb_md5 }}-${{ needs.build-deb.outputs.deb_sha1 }}-${{ needs.build-deb.outputs.deb_sha256 }}

      - name: Build apt repo
        run: |
          mkdir -p gh-pages/apt-repo/dists/stable/main/binary-all
          mkdir -p gh-pages/apt-repo/pool/main
          cd gh-pages
          apt-ftparchive packages --arch all apt-repo/pool/ > apt-repo/dists/stable/main/binary-all/Packages
          [ ! -f apt-repo/dists/stable/Release ] || rm -f apt-repo/dists/stable/Release
          apt-ftparchive release apt-repo/dists/stable/ \
          -o APT::FTPArchive::Release::Origin="pre-fake-subscription Github" \
          -o APT::FTPArchive::Release::Label="pve-fake-subscription" \
          -o APT::FTPArchive::Release::Suite="stable" \
          -o APT::FTPArchive::Release::Version="1.0"  \
          -o APT::FTPArchive::Release::Codename="stable" \
          -o APT::FTPArchive::Release::Architectures="all" \
          -o APT::FTPArchive::Release::Components="main" \
          -o APT::FTPArchive::Release::Description="Repository for pve-fake-subscription, which disables the \"No valid subscription\" dialog on all Proxmox products." \
          > Release
          mv Release apt-repo/dists/stable/Release
          cd ..
          [ ! -d ".git" ] && git init && echo "Initialized gh-pages" || echo "gh-pages already initialized"          

      - shell: bash
        run: |
          # The following 2 lines are not really necessary,
          # because we do not intend to push current branch.
          # But we choose to use target branch name as a temporary local work branch,
          # thus avoid a potential error of committing to the trigger branch.
          cd gh-pages
          git branch -f gh-pages HEAD
          git checkout gh-pages
  
          # The commit and push happen to work without authentication
          # https://docs.github.com/en/actions/reference/authentication-in-a-workflow
          git config user.name "Github Pages Overwriter"
          git config user.email "GithubPagesOverwriter@users.noreply.github.com"
  
          # The previous commit message may contain reference to github issues,
          # we wipe it out, so that it won't show up in the inevitable duplicate commit.
          git commit --amend -m "This commit will be automatically published"
  
          # Generate such a new file to make sure the subsequent commit would succeed
          # Such a file WITHOUT leading dot (.) is also visible in outcome website.
          # FYI: filename with leading dot (.) or underscore (_) would be ignored by Jekyll,
          # which Github Pages depends on. So we use a normal filename here.
          date > ./publish_date.txt
          git add --force .
          git commit -m "Automated publish"

      - name: Push the build output to github pages
        shell: bash
        ##if: ${{ inputs.source-directory == '.' }}
        # Astonishedly, the "if" command does not work in an action shipped to marketplace,
        # so that there is even a 3rd-party github action to do that
        # (https://github.com/marketplace/actions/conditional-value-for-github-action)
        # But that seems like an overkill. So, we'd use "if" in bash instead.
        run: >  # https://yaml-multiline.info/
          if [ "." == "." ]; then
            git push -f origin HEAD:refs/heads/${{ inputs.target-branch }}
          else
            # Inspired from https://gist.github.com/cobyism/4730490#gistcomment-1374989
            git push -f origin `git subtree split -P .`:refs/heads/gh-pages
          fi
